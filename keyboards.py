from typing import List, Optional
import logging
import telebot
from telebot import types
from datetime import datetime

import utils
import config
from database import db
from models import Category, Product

# –û–±—â–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
BACK_BUTTON = types.InlineKeyboardButton("‚Ü©Ô∏è  –ù–∞–∑–∞–¥", callback_data="back")

# –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard(user_id: int = None) -> types.InlineKeyboardMarkup:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–†–µ–∂–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", callback_data="mode_customer"))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if user_id == config.ADMIN_USER_ID:
        keyboard.add(types.InlineKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="mode_admin"))
    
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def get_admin_main_keyboard() -> types.InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="admin_edit_category"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="admin_delete_category")
    )
    keyboard.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="admin_edit_product"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="admin_delete_product")
    )
    keyboard.add(
        types.InlineKeyboardButton("–ó–∞–∫–∞–∑—ã", callback_data="admin_orders"),
        types.InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")
    )
    keyboard.add(
        types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="admin_save_data"),
        types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="admin_load_data")
    )
    keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞", callback_data="back_to_start"))
    return keyboard

def get_categories_keyboard(action_prefix: str) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    logger = logging.getLogger(__name__)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: {action_prefix}")
    
    keyboard = types.InlineKeyboardMarkup()
    categories = db.get_categories()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    
    for category in categories:
        callback_data = f"{action_prefix}_{category.id}"
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: {category.name} —Å callback_data: {callback_data}")
        keyboard.add(types.InlineKeyboardButton(category.name, callback_data=callback_data))
    
    keyboard.add(BACK_BUTTON)
    return keyboard

def get_products_keyboard(category_id: Optional[int], action_prefix: str) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
    keyboard = types.InlineKeyboardMarkup()
    products = db.get_products(category_id)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    sorted_products = sorted(products, key=lambda p: p.name)
    
    for product in sorted_products:
        product_text = f"{product.name} ({utils.format_money(product.price)})"
        if not product.available:
            product_text += " [–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω]"
        
        callback_data = f"{action_prefix}_{product.id}"
        keyboard.add(types.InlineKeyboardButton(product_text, callback_data=callback_data))
    
    keyboard.add(BACK_BUTTON)
    return keyboard

def get_product_edit_keyboard(product_id: int) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    keyboard = types.InlineKeyboardMarkup()
    product = db.get_product(product_id)
    availability_text = "–°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏" if product.available else "–í–µ—Ä–Ω—É—Ç—å –≤ –ø—Ä–æ–¥–∞–∂—É"
    
    keyboard.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_product_name_{product_id}"))
    keyboard.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_product_price_{product_id}"))
    keyboard.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data=f"edit_product_image_{product_id}"))
    keyboard.add(types.InlineKeyboardButton(availability_text, callback_data=f"edit_product_available_{product_id}"))
    keyboard.add(BACK_BUTTON)
    return keyboard

def get_unit_selection_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–∫–≥", callback_data="unit_kg"),
        types.InlineKeyboardButton("—à—Ç", callback_data="unit_piece")
    )
    keyboard.add(BACK_BUTTON)
    return keyboard

def get_backup_list_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    keyboard = types.InlineKeyboardMarkup()
    backups = db.list_backups()
    
    for backup in backups:
        keyboard.add(types.InlineKeyboardButton(backup, callback_data=f"load_backup_{backup}"))
    
    keyboard.add(BACK_BUTTON)
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
def get_customer_main_keyboard() -> types.InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    keyboard = types.InlineKeyboardMarkup()
    categories = db.get_categories()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in categories:
        keyboard.add(types.InlineKeyboardButton(category.name, callback_data=f"category_{category.id}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –ø–æ–∏—Å–∫
    keyboard.add(types.InlineKeyboardButton("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites"))
    keyboard.add(types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search"))
    
    return keyboard

def get_customer_main_keyboard_with_cart(user_id: int) -> types.InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞"""
    logger = logging.getLogger(__name__)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    keyboard = get_customer_main_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞
    user = db.get_user(user_id)
    if user and user.cart:
        total = utils.calculate_cart_total(user_id)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: –ö–æ—Ä–∑–∏–Ω–∞ ({utils.format_money(total)}), callback_data=cart")
        keyboard.add(types.InlineKeyboardButton(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({utils.format_money(total)})", callback_data="cart"))
    else:
        logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_id}")
    
    return keyboard

def get_products_by_category_keyboard(category_id: int, user_id: int) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    logger = logging.getLogger(__name__)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    keyboard = types.InlineKeyboardMarkup()
    products = db.get_available_products(category_id)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    sorted_products = sorted(products, key=lambda p: p.name)
    
    for product in sorted_products:
        product_text = f"{product.name} - {utils.format_money(product.price)}"
        callback_data = f"product_{product.id}"
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞: {product_text}, callback_data={callback_data}")
        keyboard.add(types.InlineKeyboardButton(product_text, callback_data=callback_data))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.add(BACK_BUTTON)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞
    user = db.get_user(user_id)
    if user and user.cart:
        total = utils.calculate_cart_total(user_id)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ö–æ—Ä–∑–∏–Ω–∞ ({utils.format_money(total)}), callback_data=cart")
        keyboard.add(types.InlineKeyboardButton(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({utils.format_money(total)})", callback_data="cart"))
    
    return keyboard

def get_product_detail_keyboard(product: Product, user_id: int, allow_custom_quantity: bool = False) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
    logger = logging.getLogger(__name__)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ {product.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–∏ —Ç–æ–≤–∞—Ä
    user = db.get_user(user_id)
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–æ–≤–∞—Ä–∞: {user_id}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard.add(BACK_BUTTON)
        return keyboard
    
    favorite_text = "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if product.id in user.favorites else "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    favorite_callback = f"remove_favorite_{product.id}" if product.id in user.favorites else f"add_favorite_{product.id}"
    
    keyboard.add(types.InlineKeyboardButton(favorite_text, callback_data=favorite_callback))
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    if product.unit == "—à—Ç":
        keyboard.add(types.InlineKeyboardButton("+1 —à—Ç", callback_data=f"add_to_cart_{product.id}_1"))
    else:
        keyboard.add(
            types.InlineKeyboardButton("+1 –∫–≥", callback_data=f"add_to_cart_{product.id}_1"),
            types.InlineKeyboardButton("+0.5 –∫–≥", callback_data=f"add_to_cart_{product.id}_0.5")
        )
        keyboard.add(
            types.InlineKeyboardButton("+0.25 –∫–≥", callback_data=f"add_to_cart_{product.id}_0.25"),
            types.InlineKeyboardButton("+0.1 –∫–≥", callback_data=f"add_to_cart_{product.id}_0.1")
        )
    # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if allow_custom_quantity:
        keyboard.add(types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"custom_quantity_{product.id}"))
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    keyboard.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data=f"remove_from_cart_{product.id}"))
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.add(BACK_BUTTON)
    # –ö–æ—Ä–∑–∏–Ω–∞, –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–∞
    if user.cart:
        total = utils.calculate_cart_total(user_id)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –≤ –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞: –ö–æ—Ä–∑–∏–Ω–∞ ({utils.format_money(total)}), callback_data=cart")
        keyboard.add(types.InlineKeyboardButton(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({utils.format_money(total)})", callback_data="cart"))
    return keyboard

def get_favorites_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    logger = logging.getLogger(__name__)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    keyboard = types.InlineKeyboardMarkup()
    favorite_products = db.get_favorite_products(user_id)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    sorted_favorites = sorted(favorite_products, key=lambda p: p.name)
    
    for product in sorted_favorites:
        product_text = f"{product.name} - {utils.format_money(product.price)}"
        callback_data = f"product_{product.id}"
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {product_text}, callback_data={callback_data}")
        keyboard.add(types.InlineKeyboardButton(product_text, callback_data=callback_data))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.add(BACK_BUTTON)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞
    user = db.get_user(user_id)
    if user and user.cart:
        total = utils.calculate_cart_total(user_id)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: –ö–æ—Ä–∑–∏–Ω–∞ ({utils.format_money(total)}), callback_data=cart")
        keyboard.add(types.InlineKeyboardButton(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({utils.format_money(total)})", callback_data="cart"))
    
    return keyboard

def get_cart_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã"""
    logger = logging.getLogger(__name__)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    try:
        keyboard = types.InlineKeyboardMarkup()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞
        user = db.get_user(user_id)
        if not user or not user.cart:
            logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'")
            keyboard.add(BACK_BUTTON)
            return keyboard
        
        keyboard.add(types.InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
        keyboard.add(types.InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))
        keyboard.add(BACK_BUTTON)
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return keyboard
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã: {str(e)}, user_id={user_id}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(BACK_BUTTON)
        return keyboard

def get_checkout_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    keyboard = types.InlineKeyboardMarkup()
    user = db.get_user(user_id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö
    if user.phone and user.address:
        keyboard.add(types.InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="use_saved_data"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard.add(types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="phone_input"))
    
    keyboard.add(BACK_BUTTON)
    return keyboard

def get_delivery_time_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞)
    keyboard.add(
        types.InlineKeyboardButton("10:00 - 12:00", callback_data="delivery_time_10-12"),
        types.InlineKeyboardButton("12:00 - 14:00", callback_data="delivery_time_12-14")
    )
    keyboard.add(
        types.InlineKeyboardButton("14:00 - 16:00", callback_data="delivery_time_14-16"),
        types.InlineKeyboardButton("16:00 - 18:00", callback_data="delivery_time_16-18")
    )
    keyboard.add(
        types.InlineKeyboardButton("18:00 - 20:00", callback_data="delivery_time_18-20"),
        types.InlineKeyboardButton("20:00 - 22:00", callback_data="delivery_time_20-22")
    )
    
    keyboard.add(BACK_BUTTON)
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
def get_orders_list_keyboard(orders: List, filter_type: str = "all", current_page: int = 1, total_pages: int = 1, page_size: int = 10) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤"""
    logger = logging.getLogger(__name__)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}, —Ñ–∏–ª—å—Ç—Ä: {filter_type}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page}/{total_pages}")
    
    try:
        keyboard = types.InlineKeyboardMarkup()
        
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
        if not orders:
            keyboard.add(types.InlineKeyboardButton("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤", callback_data="no_action"))
        else:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for order in orders:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                if not hasattr(order, "id") or not hasattr(order, "created_at") or not hasattr(order, "status"):
                    logger.warning(f"–û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {order}")
                    continue
                
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –¥–∞—Ç–∞, —Å—Ç–∞—Ç—É—Å
                    date_str = datetime.fromisoformat(order.created_at).strftime("%d.%m.%Y")
                    status_str = "‚úÖ" if order.status == "completed" else "üîÑ"
                    
                    button_text = f"–ó–∞–∫–∞–∑ #{order.id} –æ—Ç {date_str} {status_str}"
                    callback_data = f"view_order_{order.id}"
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã callback_data, Telegram API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 64 –±–∞–π—Ç
                    if len(callback_data.encode('utf-8')) > 64:
                        logger.warning(f"Callback data —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {callback_data}, –æ–±—Ä–µ–∑–∞–µ–º")
                        callback_data = callback_data[:64]
                    
                    keyboard.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {getattr(order, 'id', 'unknown')}: {str(e)}")
                    continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        if total_pages > 1:
            pagination_row = []
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            if current_page > 1:
                pagination_row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="page_prev"))
                
            # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞/–≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            pagination_row.append(types.InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data="no_action"))
            
            # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            if current_page < total_pages:
                pagination_row.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data="page_next"))
                
            keyboard.add(*pagination_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_size_row = []
        for size in [10, 20]:
            btn_text = f"üîò {size} –∑–∞–∫–∞–∑–æ–≤" if size == page_size else f"{size} –∑–∞–∫–∞–∑–æ–≤"
            page_size_row.append(types.InlineKeyboardButton(btn_text, callback_data=f"page_size_{size}"))
        
        keyboard.add(*page_size_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filter_row = []
        
        # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –∑–∞–∫–∞–∑—ã" –∞–∫—Ç–∏–≤–Ω–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä
        all_btn = types.InlineKeyboardButton(
            "üîò –í—Å–µ" if filter_type == "all" else "–í—Å–µ", 
            callback_data="filter_orders_all"
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–µ" –∞–∫—Ç–∏–≤–Ω–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä
        new_btn = types.InlineKeyboardButton(
            "üîò –ù–æ–≤—ã–µ" if filter_type == "new" else "–ù–æ–≤—ã–µ", 
            callback_data="filter_orders_new"
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ" –∞–∫—Ç–∏–≤–Ω–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä
        completed_btn = types.InlineKeyboardButton(
            "üîò –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ" if filter_type == "completed" else "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", 
            callback_data="filter_orders_completed"
        )
        
        filter_row.extend([all_btn, new_btn, completed_btn])
        keyboard.add(*filter_row)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        keyboard.add(types.InlineKeyboardButton("üìÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ", callback_data="sort_orders_date"))
        keyboard.add(types.InlineKeyboardButton("üë§ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="sort_orders_user"))
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard.add(BACK_BUTTON)
        
        logger.info("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        return keyboard
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        simple_keyboard = types.InlineKeyboardMarkup()
        simple_keyboard.add(BACK_BUTTON)
        return simple_keyboard

def get_order_detail_keyboard(order_id: int) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
    keyboard = types.InlineKeyboardMarkup()
    order = db.get_order(order_id)
    
    # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–∑–∞–≤–µ—Ä—à–µ–Ω/–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω)
    if order.status == "completed":
        keyboard.add(types.InlineKeyboardButton("Reopened –∑–∞–∫–∞–∑", callback_data=f"reopen_order_{order_id}"))
    else:
        keyboard.add(types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"complete_order_{order_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data="back_to_orders"))
    keyboard.add(BACK_BUTTON)
    
    return keyboard

def get_phone_input_keyboard(current_phone: str = "") -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Args:
        current_phone: –¢–µ–∫—É—â–∏–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–±–µ–∑ –º–∞—Å–∫–∏)
    
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—ã –æ—Ç 1 –¥–æ 9
    buttons_row = []
    for i in range(1, 10):
        btn = types.InlineKeyboardButton(str(i), callback_data=f"phone_digit_{i}")
        buttons_row.append(btn)
        if len(buttons_row) == 3:
            keyboard.add(*buttons_row)
            buttons_row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "0" –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä—è–¥–∞
    keyboard.add(
        types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="phone_delete"),
        types.InlineKeyboardButton("0", callback_data="phone_digit_0"),
        types.InlineKeyboardButton("‚úÖ", callback_data="phone_submit")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.add(BACK_BUTTON)
    
    return keyboard 